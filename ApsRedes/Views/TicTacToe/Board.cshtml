@model ApsRedes.Models.Match

@{
    ViewBag.Title = "Board";
}

<h2>Board</h2>

<div class="center-wrapper-parent">
    <div class="canvas-wrapper">
        <canvas id="tic-tac-toe-board" class="center-v"></canvas>
    </div>
</div>


<script src="//code.jquery.com/jquery-2.1.1.min.js" type="text/javascript"></script>
<script type="text/javascript">

    var player = 1;
    var lineColor = "#ddd";

    var canvas = document.getElementById('tic-tac-toe-board');
    var context = canvas.getContext('2d');

    var canvasSize = 200;
    var sectionSize = canvasSize / 3;
    canvas.width = canvasSize;
    canvas.height = canvasSize;
    context.translate(0.5, 0.5);

    canvas.addEventListener('mouseup', function (event) {
        if (player === 1) {
            player = 2;
        } else {
            player = 1;
        }

        var canvasMousePosition = getCanvasMousePosition(event);
        addPlayingPiece(canvasMousePosition);
        drawLines(10, lineColor);
    });

    var board = getInitialBoard(0);

    $(document).ready(function () {
        drawLines(10, lineColor);
        //Board = { (0, 0),  (66, 0),  (133, 0) }
        //Board = { (0, 66),  (66, 66),  (133, 66) }
        //Board = { (0, 133),  (66, 133),  (133, 133) }

        $.ajax({
            type: 'GET',
            url: '/TicTacToe/DrawnBoard',
            success: function (response) {
                alert(response.pos1);
            }
        });
    })



    function getInitialBoard(defaultValue) {

        var board = [];

        for (var x = 0; x < 3; x++) {
            board.push([]);

            for (var y = 0; y < 3; y++) {
                board[x].push(defaultValue);
            }
        }      

        return board;
    }

    function addPlayingPiece(mouse) {
        var xCordinate;
        var yCordinate;

        for (var x = 0; x < 3; x++) {
            for (var y = 0; y < 3; y++) {
                xCordinate = x * sectionSize;
                yCordinate = y * sectionSize;

                if (
                    mouse.x >= xCordinate && mouse.x <= xCordinate + sectionSize &&
                    mouse.y >= yCordinate && mouse.y <= yCordinate + sectionSize
                ) {

                    var boardX = xCordinate;
                    var boardY = yCordinate;

                    var x = Math.floor(xCordinate);

                    if (x === 66) x = 1;
                    else if (x === 133) x = 2;

                    var y = Math.floor(yCordinate);

                    if (y === 66) y = 1;
                    else if (y === 133) y = 2;

                    //$.post('/TicTacToe/PlayTurn/?posX=' + x + '&posy=' + y);
                    $.ajax({
                        type: "POST",
                        url: '/TicTacToe/PlayTurn/?posX=' + x + '&posy=' + y,
                        success: function (response) {
                            if (response.success) {
                                alert("Opponent's turn.");

                                if (response.turn) {
                                    drawX(boardX, boardY);
                                }
                                else {
                                    drawO(boardX, boardY);
                                }
                            }

                            if (response.error) {
                                alert("Wait for your turn.");
                                return;
                            }

                            if (response.over) {
                                alert("End of the match.");
                                return;
                            }

                            if (response.invalidPos) {
                                alert("Place already marked.");
                                if (!response.turn) {
                                    drawX(boardX, boardY);
                                }
                                else {
                                    drawO(boardX, boardY);
                                }
                                return;
                            }
                        }
                    });
                }
            }
        }
        //$.get('/TicTacToe/Test/?posX=' + x + '&posy=2');
        @*//$.get( '@Url.Action( "Test", "TicTacToe" )');*@
    }

    function clearPlayingArea(xCordinate, yCordinate) {
        context.fillStyle = "#fff";
        context.fillRect(
            xCordinate,
            yCordinate,
            sectionSize,
            sectionSize
        );
    }
    function drawO(xCordinate, yCordinate) {
        var halfSectionSize = (0.5 * sectionSize);
        var centerX = xCordinate + halfSectionSize;
        var centerY = yCordinate + halfSectionSize;
        var radius = (sectionSize - 50) / 2;
        var startAngle = 0 * Math.PI;
        var endAngle = 2 * Math.PI;

        context.lineWidth = 10;
        context.strokeStyle = "#01bBC2";
        context.beginPath();
        context.arc(centerX, centerY, radius, startAngle, endAngle);
        context.stroke();
    }

    function drawX(xCordinate, yCordinate) {
        context.strokeStyle = "#f1be32";

        context.beginPath();

        var offset = 50;
        context.moveTo(xCordinate + offset, yCordinate + offset);
        context.lineTo(xCordinate + sectionSize - offset, yCordinate + sectionSize - offset);

        context.moveTo(xCordinate + offset, yCordinate + sectionSize - offset);
        context.lineTo(xCordinate + sectionSize - offset, yCordinate + offset);

        context.stroke();
    }

    function drawLines(lineWidth, strokeStyle) {
        var lineStart = 4;
        var lineLenght = canvasSize - 5;
        context.lineWidth = lineWidth;
        context.lineCap = 'round';
        context.strokeStyle = strokeStyle;
        context.beginPath();

        /*
         * Horizontal lines
         */
        for (var y = 1; y <= 2; y++) {
            context.moveTo(lineStart, y * sectionSize);
            context.lineTo(lineLenght, y * sectionSize);
        }

        /*
         * Vertical lines
         */
        for (var x = 1; x <= 2; x++) {
            context.moveTo(x * sectionSize, lineStart);
            context.lineTo(x * sectionSize, lineLenght);
        }

        context.stroke();
    }

    function getCanvasMousePosition(event) {
        var rect = canvas.getBoundingClientRect();

        return {
            x: event.clientX - rect.left,
            y: event.clientY - rect.top
        }
    }
</script>

<style>
    #tic-tac-toe-board {
        display: block;
        margin: 0 auto;
    }

    .canvas-wrapper {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 100%;
    }
</style>